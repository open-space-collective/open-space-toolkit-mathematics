<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classostk_1_1mathematics_1_1object_1_1_interval" kind="class" language="C++" prot="public">
    <compoundname>ostk::mathematics::object::Interval</compoundname>
    <basecompoundref refid="classostk_1_1mathematics_1_1object_1_1_interval_base" prot="public" virt="non-virtual">ostk::mathematics::object::IntervalBase</basecompoundref>
    <includes refid="_interval_8hpp" local="no">Interval.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classostk_1_1mathematics_1_1object_1_1_interval_1a21cbea0716dfcda1667b7a46b2133262" prot="private" static="no" mutable="no">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" kindref="member">Interval::Type</ref></type>
        <definition>Interval::Type ostk::mathematics::object::Interval&lt; T &gt;::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="360" column="20" bodyfile="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classostk_1_1mathematics_1_1object_1_1_interval_1a7f84e7aef2105110a4e79675f1151892" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T ostk::mathematics::object::Interval&lt; T &gt;::lowerBound_</definition>
        <argsstring></argsstring>
        <name>lowerBound_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="362" column="7" bodyfile="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classostk_1_1mathematics_1_1object_1_1_interval_1a810df853f5b560588d5a82cae03406e1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T ostk::mathematics::object::Interval&lt; T &gt;::upperBound_</definition>
        <argsstring></argsstring>
        <name>upperBound_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="363" column="7" bodyfile="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a625893384a0eea6cedbe88172764a525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::mathematics::object::Interval&lt; T &gt;::Interval</definition>
        <argsstring>(const T &amp;aLowerBound, const T &amp;anUpperBound, const Interval::Type &amp;anIntervalType)</argsstring>
        <name>Interval</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" kindref="member">Interval::Type</ref> &amp;</type>
          <declname>anIntervalType</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval(0.0,<sp/>1.0,<sp/>Interval::Type::Closed)<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aLowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>A lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">anUpperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>An upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">anIntervalType</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a9ad41bce0c1205f0786f946870cf0fdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::operator==</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>==<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if intervals are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="69" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a0af7fe64d3e97061f44348b799654619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::operator!=</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Not equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>!=<sp/>Interval&lt;Real&gt;::Open(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if intervals are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a6dd09d2e325303a5ad0097bed3896708" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
<para>Check if interval is defined. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0).isDefined()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if interval is defined </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a1f279c73d8c7a5fa69ce52dc301d1f5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::isDegenerate</definition>
        <argsstring>() const</argsstring>
        <name>isDegenerate</name>
        <briefdescription>
<para>Check if interval is degenerate, i.e. its lower and upper bounds are the equal. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(1.0,<sp/>1.0).isDegenerate()<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if interval is degenerate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="114" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a8f109e44bbf0691c0a941a48df64c808" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::intersects</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Check if interval is intersecting with another interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0).intersects(Interval&lt;Real&gt;::Closed(0.5,<sp/>1.5))<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if intervals are intersecting </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="125" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ac80d99178336fdcddf7406757f0cc27e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::contains</definition>
        <argsstring>(const T &amp;aValue) const</argsstring>
        <name>contains</name>
        <param>
          <type>const T &amp;</type>
          <declname>aValue</declname>
        </param>
        <briefdescription>
<para>Check if interval contains value. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0).contains(0.5)<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if interval contains value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="136" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a83de87f899ef154f8364c875a45e89b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::contains</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Check if interval contains another interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0).contains(Interval&lt;Real&gt;::Open(0.2,<sp/>0.8))<sp/>;<sp/>//<sp/>True</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if interval contains another interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="147" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ac2e35a2096405efb9a7ab511a1c2e532" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; ostk::mathematics::object::Interval&lt; T &gt;::accessLowerBound</definition>
        <argsstring>() const</argsstring>
        <name>accessLowerBound</name>
        <briefdescription>
<para>Get reference to lower bound. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">interval.accessLowerBound()<sp/>;<sp/>//<sp/>&amp;0.0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Reference to lower bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="158" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a575cb7312386085246bed0ee94aeda56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; ostk::mathematics::object::Interval&lt; T &gt;::accessUpperBound</definition>
        <argsstring>() const</argsstring>
        <name>accessUpperBound</name>
        <briefdescription>
<para>Get reference to upper bound. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">interval.accessUpperBound()<sp/>;<sp/>//<sp/>&amp;1.0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Reference to upper bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="169" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1aed3a6e8e931beaa732211ccb44e2c43d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" kindref="member">Interval::Type</ref></type>
        <definition>Interval::Type ostk::mathematics::object::Interval&lt; T &gt;::getType</definition>
        <argsstring>() const</argsstring>
        <name>getType</name>
        <briefdescription>
<para>Get interval type. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">interval.getType()<sp/>;<sp/>//<sp/>Interval&lt;Real&gt;::Type::Closed</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="180" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a79e64fd3c8faa78c8b62859c5b095b60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T ostk::mathematics::object::Interval&lt; T &gt;::getLowerBound</definition>
        <argsstring>() const</argsstring>
        <name>getLowerBound</name>
        <briefdescription>
<para>Get lower bound. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">interval.getLowerBound()<sp/>;<sp/>//<sp/>0.0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Lower bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="191" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a17efb397c97eb600f37fbe3e8517df4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T ostk::mathematics::object::Interval&lt; T &gt;::getUpperBound</definition>
        <argsstring>() const</argsstring>
        <name>getUpperBound</name>
        <briefdescription>
<para>Get upper bound. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">interval.getUpperBound()<sp/>;<sp/>//<sp/>1.0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Upper bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="202" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a2d06470c41c25401977c6a1b0da578e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::getIntersectionWith</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>getIntersectionWith</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Get intersecting interval with another interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>firstInterval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>secondInterval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.5,<sp/>1.5)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>intersection<sp/>=<sp/>firstInterval.getIntersectionWith(secondInterval)<sp/>;<sp/>//</highlight></codeline>
<codeline><highlight class="normal">[0.5,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Intersecting interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="216" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1af0b873731c1700be9b2a30d87a2aa956" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::getUnionWith</definition>
        <argsstring>(const Interval &amp;anInterval) const</argsstring>
        <name>getUnionWith</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Get union interval with another interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>firstInterval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>secondInterval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.5,<sp/>1.5)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>union<sp/>=<sp/>firstInterval.getUnionWith(secondInterval)<sp/>;<sp/>//<sp/>[0.0,<sp/>1.5]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Union interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="229" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ad1636246dd97c94a67d38b5d2a8eb868" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>ctnr::Array&lt; T &gt;</type>
        <definition>ctnr::Array&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::generateArrayWithStep</definition>
        <argsstring>(const U &amp;aStep) const</argsstring>
        <name>generateArrayWithStep</name>
        <param>
          <type>const U &amp;</type>
          <declname>aStep</declname>
        </param>
        <briefdescription>
<para>Generate array from a given step. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;Real&gt;<sp/>array<sp/>=<sp/>interval.generateArrayWithStep(0.5)<sp/>;<sp/>//<sp/>[0.0,<sp/>0.5,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aStep</parametername>
</parameternamelist>
<parameterdescription>
<para>A step </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="242" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ad84a50656e1779837cdf34e8cb8867a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ctnr::Array&lt; T &gt;</type>
        <definition>ctnr::Array&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::generateArrayWithSize</definition>
        <argsstring>(const types::Size &amp;anArraySize) const</argsstring>
        <name>generateArrayWithSize</name>
        <param>
          <type>const types::Size &amp;</type>
          <declname>anArraySize</declname>
        </param>
        <briefdescription>
<para>Generate array with a given size. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;Real&gt;<sp/>array<sp/>=<sp/>interval.generateArrayWithSize(3)<sp/>;<sp/>//<sp/>[0.0,<sp/>0.5,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anArraySize</parametername>
</parameternamelist>
<parameterdescription>
<para>An array size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="254" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a2078d591dd42e83abb2851a49e00cddf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>types::String</type>
        <definition>types::String ostk::mathematics::object::Interval&lt; T &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Get serialized interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::HalfOpenLeft(0.0,<sp/>1.0).toString()<sp/>;<sp/>//<sp/>]0.0,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Serialized interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="264" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ad0010cca002a86b15a2dc9e4f5335201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ostk::mathematics::object::Interval&lt; T &gt;::setType</definition>
        <argsstring>(const Interval::Type &amp;aType)</argsstring>
        <name>setType</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" kindref="member">Interval::Type</ref> &amp;</type>
          <declname>aType</declname>
        </param>
        <briefdescription>
<para><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> type setter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aType</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="270" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a190b44671c94ecef7725747127bb6060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ostk::mathematics::object::Interval&lt; T &gt;::setLowerBound</definition>
        <argsstring>(const T &amp;aLowerBound)</argsstring>
        <name>setLowerBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <briefdescription>
<para><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> lower bound setter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aLowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>A lower bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="276" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a42cfebf36ddd48dde7e0673f62716eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ostk::mathematics::object::Interval&lt; T &gt;::setUpperBound</definition>
        <argsstring>(const T &amp;anUpperBound)</argsstring>
        <name>setUpperBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <briefdescription>
<para><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> upper bound setter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anUpperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>An upper bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="282" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classostk_1_1mathematics_1_1object_1_1_interval_1a3aa32afa8cb5d85eeb45540b0bf5657b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;anOutputStream, const Interval&lt; U &gt; &amp;anInterval)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>anOutputStream</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; U &gt; &amp;</type>
          <declname>anInterval</declname>
        </param>
        <briefdescription>
<para>Output stream operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval(0.0,<sp/>1.0,<sp/>Interval::Type::Closed)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>interval<sp/>;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anOutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>An output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">anInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="94" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a877844b24a34a2c5c5109ce658cd5551" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::Undefined</definition>
        <argsstring>()</argsstring>
        <name>Undefined</name>
        <briefdescription>
<para>Constructs an undefined interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Undefined()<sp/>;<sp/>//<sp/>Undefined</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Undefined interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="292" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a3d13b7bfa9bcfee7dd3a7f9998378c4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::Closed</definition>
        <argsstring>(const T &amp;aLowerBound, const T &amp;anUpperBound)</argsstring>
        <name>Closed</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <briefdescription>
<para>Constructs a closed interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Closed(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>[0.0,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Closed interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="302" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a0dc8428f4db393e2ae009e2a8730c8c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::Open</definition>
        <argsstring>(const T &amp;aLowerBound, const T &amp;anUpperBound)</argsstring>
        <name>Open</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <briefdescription>
<para>Constructs an open interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Open(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>]0.0,<sp/>1.0[</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Open interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="312" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ac0553ec6683fa168ae0beb39d1a4377a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::HalfOpenLeft</definition>
        <argsstring>(const T &amp;aLowerBound, const T &amp;anUpperBound)</argsstring>
        <name>HalfOpenLeft</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <briefdescription>
<para>Constructs an half-open left interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::HalfOpenLeft(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>]0.0,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Half-open left interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="322" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ac7c309f97e84496b0520879137fb26a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::HalfOpenRight</definition>
        <argsstring>(const T &amp;aLowerBound, const T &amp;anUpperBound)</argsstring>
        <name>HalfOpenRight</name>
        <param>
          <type>const T &amp;</type>
          <declname>aLowerBound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>anUpperBound</declname>
        </param>
        <briefdescription>
<para>Constructs an half-open right interval. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::HalfOpenRight(0.0,<sp/>1.0)<sp/>;<sp/>//<sp/>[0.0,<sp/>1.0[</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Half-open right interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="332" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ac57a376cb40367712a31e57b82d4bf96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref>&lt; T &gt;</type>
        <definition>static Interval&lt;T&gt; ostk::mathematics::object::Interval&lt; T &gt;::Parse</definition>
        <argsstring>(const types::String &amp;aString)</argsstring>
        <name>Parse</name>
        <param>
          <type>const types::String &amp;</type>
          <declname>aString</declname>
        </param>
        <briefdescription>
<para>Constructs an interval from a given string. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;<sp/>interval<sp/>=<sp/>Interval&lt;Real&gt;::Parse(&quot;[0.0,<sp/>1.0]&quot;)<sp/>;<sp/>//<sp/>[0.0,<sp/>1.0]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aString</parametername>
</parameternamelist>
<parameterdescription>
<para>A string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1mathematics_1_1object_1_1_interval" kindref="compound">Interval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="343" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1a906c45e8ea21c1d762015a491afa2254" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>types::String</type>
        <definition>static types::String ostk::mathematics::object::Interval&lt; T &gt;::StringFromType</definition>
        <argsstring>(const Interval::Type &amp;anIntervalType)</argsstring>
        <name>StringFromType</name>
        <param>
          <type>const <ref refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" kindref="member">Interval::Type</ref> &amp;</type>
          <declname>anIntervalType</declname>
        </param>
        <briefdescription>
<para>Converts interval type to string. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">Interval&lt;Real&gt;::StringFromType(Interval&lt;Real&gt;::Type::Closed)<sp/>;<sp/>//<sp/>&quot;Closed&quot;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">anIntervalType</parametername>
</parameternamelist>
<parameterdescription>
<para>An interval type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="354" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1aac4f176cc812d094c5dc6ffdf42050d6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::checkAgainstLowerBound</definition>
        <argsstring>(const T &amp;aValue, const bool &amp;isOpen, const bool &amp;isUpperBound) const</argsstring>
        <name>checkAgainstLowerBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>aValue</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>isOpen</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>isUpperBound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="357" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1mathematics_1_1object_1_1_interval_1ade1571d889e2c59a03681fb26240143c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::mathematics::object::Interval&lt; T &gt;::checkAgainstUpperBound</definition>
        <argsstring>(const T &amp;aValue, const bool &amp;isOpen, const bool &amp;isLowerBound) const</argsstring>
        <name>checkAgainstUpperBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>aValue</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>isOpen</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>isLowerBound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="358" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Set of numbers with the property that any number that lies between two numbers in the set is also included in the set. </para>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://en.wikipedia.org/wiki/Interval_">https://en.wikipedia.org/wiki/Interval_</ulink>(mathematics) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ostk::mathematics::object::Interval&lt; T &gt;</label>
        <link refid="classostk_1_1mathematics_1_1object_1_1_interval"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ostk::mathematics::object::IntervalBase</label>
        <link refid="classostk_1_1mathematics_1_1object_1_1_interval_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ostk::mathematics::object::Interval&lt; T &gt;</label>
        <link refid="classostk_1_1mathematics_1_1object_1_1_interval"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ostk::mathematics::object::IntervalBase</label>
        <link refid="classostk_1_1mathematics_1_1object_1_1_interval_base"/>
      </node>
    </collaborationgraph>
    <location file="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" line="46" column="1" bodyfile="include/OpenSpaceToolkit/Mathematics/Object/Interval.hpp" bodystart="45" bodyend="364"/>
    <listofallmembers>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ac2e35a2096405efb9a7ab511a1c2e532" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>accessLowerBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a575cb7312386085246bed0ee94aeda56" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>accessUpperBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1aac4f176cc812d094c5dc6ffdf42050d6" prot="private" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>checkAgainstLowerBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ade1571d889e2c59a03681fb26240143c" prot="private" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>checkAgainstUpperBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a3d13b7bfa9bcfee7dd3a7f9998378c4b" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Closed</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ac80d99178336fdcddf7406757f0cc27e" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>contains</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a83de87f899ef154f8364c875a45e89b5" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>contains</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ad84a50656e1779837cdf34e8cb8867a2" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>generateArrayWithSize</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ad1636246dd97c94a67d38b5d2a8eb868" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>generateArrayWithStep</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a2d06470c41c25401977c6a1b0da578e1" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>getIntersectionWith</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a79e64fd3c8faa78c8b62859c5b095b60" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>getLowerBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1aed3a6e8e931beaa732211ccb44e2c43d" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>getType</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1af0b873731c1700be9b2a30d87a2aa956" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>getUnionWith</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a17efb397c97eb600f37fbe3e8517df4b" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>getUpperBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ac0553ec6683fa168ae0beb39d1a4377a" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>HalfOpenLeft</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ac7c309f97e84496b0520879137fb26a4" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>HalfOpenRight</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a8f109e44bbf0691c0a941a48df64c808" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>intersects</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a625893384a0eea6cedbe88172764a525" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Interval</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a6dd09d2e325303a5ad0097bed3896708" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>isDefined</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a1f279c73d8c7a5fa69ce52dc301d1f5a" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>isDegenerate</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a7f84e7aef2105110a4e79675f1151892" prot="private" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>lowerBound_</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a0dc8428f4db393e2ae009e2a8730c8c2" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Open</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a0af7fe64d3e97061f44348b799654619" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>operator!=</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a3aa32afa8cb5d85eeb45540b0bf5657b" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>operator&lt;&lt;</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a9ad41bce0c1205f0786f946870cf0fdc" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>operator==</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ac57a376cb40367712a31e57b82d4bf96" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Parse</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a190b44671c94ecef7725747127bb6060" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>setLowerBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1ad0010cca002a86b15a2dc9e4f5335201" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>setType</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a42cfebf36ddd48dde7e0673f62716eb3" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>setUpperBound</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a906c45e8ea21c1d762015a491afa2254" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>StringFromType</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a2078d591dd42e83abb2851a49e00cddf" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>toString</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_base_1a2ad76e98fc37333faeb21490c7b4f201" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Type</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a21cbea0716dfcda1667b7a46b2133262" prot="private" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>type_</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a877844b24a34a2c5c5109ce658cd5551" prot="public" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>Undefined</name></member>
      <member refid="classostk_1_1mathematics_1_1object_1_1_interval_1a810df853f5b560588d5a82cae03406e1" prot="private" virt="non-virtual"><scope>ostk::mathematics::object::Interval</scope><name>upperBound_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
